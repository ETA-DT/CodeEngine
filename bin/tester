#!/bin/bash

# Envs that can be set in the batch job:
# APIKEY       - used to log into IBM Cloud
# COS_CRN      - CRN of COS instance to use when storing the output/log file
# COS_URL      - External URL to COS bucket
# GROUP        - IBM Cloud resource group, using during IBM Cloud login
# SLACK_URL... - a Slack URL to post the results to (one env var per URL)
# TEST_SKIP    - list of tests (dir) to skip (spaces between them) (optional)

# Set up batch job:
# ibmcloud ce secret create -n keys ...above keys...
# ibmcloud ce job create -n github --image ibmcomtest/ce-tester \
#   -e PROJECT=testing -e REPORT=true --env-from-secret=keys -r 0
# ibmcloud ce sub cron create -n github -s "0 * * * *" -d github --dt=job

echo "====================================================================="

PROJECT=${PROJECT:-testing}
rm -f msg tests.out tester.out

(
set -ex

if [[ -v REGISTRY_APIKEY ]] ; then
  export REGISTRY=${REGISTRY:-ibmcomtest}
fi

env | sort | sed "s/APIKEY=.*/APIKEY=.../"

git clone https://github.com/IBM/CodeEngine.git
cd CodeEngine

ibmcloud update -f
ibmcloud plugin install event-streams
ibmcloud plugin update --all -f

env | awk -F= '/^APIKEY=/{ print $2 }' > .key
ibmcloud login -r us-south --apikey @.key -g $GROUP
rm .key

trap clean EXIT
function clean {
  rc=$?
  set +e
  ibmcloud ce project delete -n $PROJECT -f --hard --wait
  { date ; echo ; } | tee -a  ../tester.out
  return $rc
}

{
  date ; echo
  ibmcloud ce project delete -n $PROJECT -f --hard --wait || true
  date ; echo
  ibmcloud ce project create -n $PROJECT
  echo
} 2>&1 | tee ../tester.out
[[ ${PIPESTATUS[0]} != "0" ]] && exit 1

if [[ -v REGISTRY_APIKEY ]]; then
  bin/build-all
fi

bin/run-all-parallel
) 2>&1 | tee tests.out
rc=${PIPESTATUS[0]}

set -ex

name=$(TZ=America/New_York date "+%F-%T").txt
COS_URL=${COS_URL}/${name}

LINKS=": <$COS_URL|Logs>"
FAILS=$(grep FAIL: tests.out) || true
[[ -n $FAILS ]] && FAILS=" \`\`\`$FAILS\`\`\`"

# Save the output from all tests
[[ -e CodeEngine/run-all.out ]] && cat CodeEngine/run-all.out >> tester.out

ibmcloud cos config crn --crn "$COS_CRN" --force
ibmcloud cos config auth --method IAM
ibmcloud cos object-put --bucket github-logs --key ${name} --body tester.out

if [[ $rc != "0" ]]; then
  TITLE="Github samples FAILED"
else
  TITLE="Github samples PASSED"
fi

SUMMARY=$(echo "$TITLE$LINKS$FAILS" | jq -asR .)

cat <<EOF >msg
{
  "text": "$TITLE",
  "blocks":[
    { "type": "section",
	  "text": {
	    "type": "mrkdwn",
		"text": $SUMMARY
	  }
	}
  ]
}
EOF

# Report our status to all SLACK_URL env var we have
[[ -n $REPORT || $rc != "0" ]] && (
  set +x
  env | grep SLACK_URL | while read URL ; do
    echo URL: $URL
    curl -w "%{http_code}\n" -fs ${URL##*=} --data @msg
  done
)

exit $rc
