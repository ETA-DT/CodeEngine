#!/bin/bash

# Script used to demo this sample, live!
# Use "./demo" to run it
#   Press 'f' to stop the "slow type" on commands
#   Press 'r' to not pause at all (do after 'f')
#   Prsss any other key (e.g. space, enter) to exit the pause
# Use "./demo" clean" to clean from previous run.A

. .demoscript

export RETRYONFAIL=true
export BUCKET=thumb-bucket$RANDOM
export ICR_NS=thumbnail-icr

function clean() {
  echo Cleaning...
  (
  ibmcloud ce sub cos delete --name coswatch --force
  ibmcloud ce build delete --name eventer-build -force
  ibmcloud ce app delete --name thumbnail --force
  ibmcloud ce app delete --name eventer --force
  ibmcloud ce job delete --name thumbnail-job -force
  ibmcloud ce registry delete --name icr --force
  ibmcloud cr namespace-rm $ICR_NS --force
  ibmcloud iam api-key-delete thumbnail-icr-apikey --force
  [[ -e .bucket ]] && export BUCKET=$(cat .bucket)
  for i in `seq 1 5` ; do
    ibmcloud cos objects --bucket $BUCKET --output json | \
      sed -n 's/.*"Key": "\(.*\)",.*/\1/p' | \
	  while read k ; do
	    ibmcloud cos object-delete --bucket $BUCKET --key $k --force
	  done
  done
  ibmcloud cos bucket-delete --bucket $BUCKET --force
  rm -f .bucket
  ibmcloud resource service-instance-delete thumbnail-cos --force
  ) > /dev/null 2>&1
}

clean
[[ "$1" == "clean" ]] && exit 0

set -e

# doit ibmcloud plugin update --all --force

doit --showcmd="ibmcloud ce app create --name thumbnail --image ibmcom/thumbnail" ibmcloud ce app create --name thumbnail --image ibmcom/thumbnail --min-scale=1
export URL=$(tail -1 out)

comment --pause "Go see the cool app"

doit ibmcloud resource service-instance-create thumbnail-cos \
    cloud-object-storage lite global
export COS_ID=$(sed -n 's/^ID:[ ^t]*//p' < out | sed "s/ *//g")

ibmcloud cos config crn --crn $COS_ID --force > /dev/null 2>&1
ibmcloud cos config auth --method IAM > /dev/null 2>&1

doit ibmcloud cos bucket-create --bucket $BUCKET
echo $BUCKET > .bucket

doit ibmcloud ce app bind --name thumbnail --service-instance thumbnail-cos

doit ibmcloud ce app update --name thumbnail --image ibmcom/thumbnail:v2 \
    --env BUCKET=$BUCKET

comment --pause "Can now see new app, but job isn't connection yet"

doit ibmcloud ce job create --name thumbnail-job --image ibmcom/thumbnail-job \
    --env BUCKET=$BUCKET

doit ibmcloud ce job bind --name thumbnail-job --service-instance thumbnail-cos

comment --pause "Run the batch job in the app"

doit ibmcloud cr namespace-add $ICR_NS
export ICR=$(sed -n 's/^.*in registry \(.*\)\.\.\.$/\1/p' < out)

doit ibmcloud iam api-key-create thumbnail-icr-apikey > out1
export APIKEY=$(sed -n 's/^API Key[ ^t]*//p' < out1 | sed "s/ *//g")
sed "s/^\(API Key[ ^t]*\).*/\1XXX/" < out1
rm -f out1

doit --showcmd="ibmcloud ce registry create --name icr --password XXX --server $ICR" ibmcloud ce registry create --name icr --password $APIKEY --server $ICR

doit ibmcloud ce build create --name eventer-build \
    --image $ICR/$ICR_NS/eventer \
    --source https://github.com/IBM/CodeEngine \
    --registry-secret icr \
    --context-dir thumbnail/eventer

doit ibmcloud ce buildrun submit --build eventer-build --wait

doit --showcmd="ibmcloud ce app create --name eventer --image $ICR/$ICR_NS/eventer --registry-secret icr --cluster-local" ibmcloud ce app create --name eventer --image $ICR/$ICR_NS/eventer --registry-secret icr --cluster-local --min-scale=1

doit ibmcloud ce app bind --name eventer --service-instance thumbnail-cos

doit ibmcloud ce sub cos create --name coswatch --bucket $BUCKET \
    --destination eventer

doit ibmcloud ce app update --name thumbnail --env HIDE_BUTTON=true

comment --pause "All done! Go to app and upload an image"

# If we're not pausing then assume we're just testing
if [[ -n $skip ]]; then
  comment Testing
  DOG1=dog$RANDOM
  DOG2=dug$RANDOM
  comment Download a dog image from the app
  doit curl -fs $URL/images/dog1.jpg \> dog

  comment Test the batchjob first
  doit ibmcloud cos object-put --bucket $BUCKET --key $DOG1 --body dog
  doit curl -fs $URL/calcthumbnails
  doit sleep 10
  doit curl -fs $URL/bucket \| grep ${DOG1}.*thumb

  comment Now test the eventer
  # give the COS subscription time to be fully ready
  doit sleep 60
  doit ibmcloud cos object-put --bucket $BUCKET --key $DOG2 --body dog
  doit sleep 10
  doit curl -fs $URL/bucket \| grep ${DOG2}.*thumb

  comment Now clean-up
  rm -f dog
  clean
fi
